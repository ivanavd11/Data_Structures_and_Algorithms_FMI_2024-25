#include <bits/stdc++.h>
using namespace std;

template <class T>
void Merge(T* firstArr, size_t firstSize, T* secondArr, size_t secondSize, T* resultArr)
{
    size_t resultIter = 0; 
    size_t firstIter = 0;
    size_t secondIter = 0;

    while(firstIter < firstSize && secondIter < secondSize)
        resultArr[resultIter++] = (firstArr[firstIter] < secondArr[secondIter] ? secondArr[secondIter++] : firstArr[firstIter++]);

    while(firstIter < firstSize)
        resultArr[resultIter++] = firstArr[firstIter++];

    while(secondIter < secondSize)
        resultArr[resultIter++] = secondArr[secondIter++];
}

template <class T>
void MergeSortStep(T* pArr, size_t Size, T* pBuffer)
{
    if(Size <= 1)
        return;

    size_t middle = Size / 2;

    MergeSortStep(pArr, middle, pBuffer);

    MergeSortStep(pArr + middle, Size - middle, pBuffer + middle);

    Merge(pArr, middle, pArr + middle, Size - middle, pBuffer);

    for(size_t i = 0; i < Size; i++)
        pArr[i] = pBuffer[i];
}

template <class T>
void MergeSort(T* pArr, size_t Size)
{
    if (!pArr || Size == 0)
        return;

    T* pBuffer = new T[Size];

    MergeSortStep(pArr, Size, pBuffer);

    delete[]  pBuffer;
}
int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);
    
    int size;
    cin>>size;
    int *arr = new int[size];
    for(int i=0;i<size;i++)
    {
        cin>>arr[i];
    }
    
    MergeSort(arr, size);
    
    for(int i=0;i<size;i++)
    {
        cout<<arr[i]<<" ";
    }
    
    delete[]arr;

    return 0;
}
